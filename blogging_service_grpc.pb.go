// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: blogging_service.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BloggingServiceClient is the client API for BloggingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloggingServiceClient interface {
	Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*CreateResult, error)
	Read(ctx context.Context, in *ReadParams, opts ...grpc.CallOption) (*ReadResult, error)
	Update(ctx context.Context, in *UpdateParams, opts ...grpc.CallOption) (*UpdateResult, error)
	Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*DeleteResult, error)
}

type bloggingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloggingServiceClient(cc grpc.ClientConnInterface) BloggingServiceClient {
	return &bloggingServiceClient{cc}
}

func (c *bloggingServiceClient) Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*CreateResult, error) {
	out := new(CreateResult)
	err := c.cc.Invoke(ctx, "/BloggingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingServiceClient) Read(ctx context.Context, in *ReadParams, opts ...grpc.CallOption) (*ReadResult, error) {
	out := new(ReadResult)
	err := c.cc.Invoke(ctx, "/BloggingService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingServiceClient) Update(ctx context.Context, in *UpdateParams, opts ...grpc.CallOption) (*UpdateResult, error) {
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, "/BloggingService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingServiceClient) Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/BloggingService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloggingServiceServer is the server API for BloggingService service.
// All implementations must embed UnimplementedBloggingServiceServer
// for forward compatibility
type BloggingServiceServer interface {
	Create(context.Context, *CreateParams) (*CreateResult, error)
	Read(context.Context, *ReadParams) (*ReadResult, error)
	Update(context.Context, *UpdateParams) (*UpdateResult, error)
	Delete(context.Context, *DeleteParams) (*DeleteResult, error)
	mustEmbedUnimplementedBloggingServiceServer()
}

// UnimplementedBloggingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBloggingServiceServer struct {
}

func (UnimplementedBloggingServiceServer) Create(context.Context, *CreateParams) (*CreateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBloggingServiceServer) Read(context.Context, *ReadParams) (*ReadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBloggingServiceServer) Update(context.Context, *UpdateParams) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBloggingServiceServer) Delete(context.Context, *DeleteParams) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBloggingServiceServer) mustEmbedUnimplementedBloggingServiceServer() {}

// UnsafeBloggingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloggingServiceServer will
// result in compilation errors.
type UnsafeBloggingServiceServer interface {
	mustEmbedUnimplementedBloggingServiceServer()
}

func RegisterBloggingServiceServer(s grpc.ServiceRegistrar, srv BloggingServiceServer) {
	s.RegisterService(&BloggingService_ServiceDesc, srv)
}

func _BloggingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BloggingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingServiceServer).Create(ctx, req.(*CreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BloggingService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingServiceServer).Read(ctx, req.(*ReadParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BloggingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingServiceServer).Update(ctx, req.(*UpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BloggingService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingServiceServer).Delete(ctx, req.(*DeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

// BloggingService_ServiceDesc is the grpc.ServiceDesc for BloggingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloggingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BloggingService",
	HandlerType: (*BloggingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BloggingService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _BloggingService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BloggingService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BloggingService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogging_service.proto",
}
